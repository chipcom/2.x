#include 'function.ch'
#include 'common.ch'
#include 'hbhash.ch' 

#require 'hbsqlit3'

// 13.07.24
function getPCEL_usl( shifr )

  local ret := ''
  local lshifr := alltrim( shifr )
  local aHash := loadUsl_pcel()

  if hb_hHaskey( aHash, lshifr )
    ret := aHash[ lshifr ]
  endif
  return ret

// 13.07.24 вернуть массив по справочнику usl_p_cel (соответствие услуги цели посещения)
function loadUsl_pcel()

  static arr
  local db
  local aTable
  local nI

  if isnil( arr )
    arr := hb_hash()
    db := openSQL_DB()
    aTable := sqlite3_get_table(db, 'SELECT shifr, p_cel FROM usl_p_cel')
    
//    if len(aTable) > 1
//      for nI := 2 to Len( aTable )
//        aadd(_arr, {alltrim(aTable[nI, 2]), alltrim(aTable[nI, 1])})
//      next
//    endif
    if len(aTable) > 1
      for nI := 2 to Len(aTable)
        hb_hSet(arr, alltrim( aTable[ nI, 1 ] ), alltrim( aTable[ nI, 2 ] ) )
      next
    endif

    db := nil
  endif
  return arr

// 28.03.23 вернуть массив по справочнику dlo_lgota
function getDLO_lgota()
  // dlo_lgota - Классификатор кодов льгот по ДЛО
  //  1 - KOD(C) 2 - NAME(C)
  static _arr
  static time_load
  local db
  local aTable
  local nI

  if timeout_load(@time_load)
    _arr := {}
    db := openSQL_DB()
    aTable := sqlite3_get_table(db, 'SELECT kod, name FROM dlo_lgota')
    
    if len(aTable) > 1
      for nI := 2 to Len( aTable )
        aadd(_arr, {alltrim(aTable[nI, 2]), alltrim(aTable[nI, 1])})
      next
    endif
    db := nil
  endif
  return _arr

// 30.03.23
function get_err_csv_prik()
  static arr
  static time_load
  local db
  local aTable
  local nI

  if timeout_load(@time_load)
    arr := {}
    db := openSQL_DB()
    aTable := sqlite3_get_table(db, 'SELECT kod, name FROM err_csv_prik')
    
    if len(aTable) > 1
      for nI := 2 to Len( aTable )
        aadd(arr, {alltrim(aTable[nI, 2]), val(aTable[nI, 1])})
      next
    endif
    db := nil
  endif

  return arr

// 31.03.23
function get_rekv_SMO()
  static arr
  static time_load
  local db
  local aTable
  local nI

  if timeout_load(@time_load)
    arr := {}
    db := openSQL_DB()
    aTable := sqlite3_get_table(db, 'SELECT kod, name, inn, kpp, ogrn, addres FROM rekv_smo')
    if len(aTable) > 1
      for nI := 2 to Len( aTable )
        aadd(arr, {aTable[nI, 1], alltrim(aTable[nI, 2]), aTable[nI, 3], aTable[nI, 4], ;
          aTable[nI, 5], alltrim(aTable[nI, 6]), '', '', ''})
      next
    endif
    db := nil
  endif

  return arr

// 30.03.23
function getNMIC()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {' медицинская организация Волгограда (Волгоградской области)'               , 0})
    aadd(arr, {' 1 НМИЦ онкологии им.Н.Н.Блохина'                                          , 1})
    aadd(arr, {' 2 НМИЦ им.В.А.Алмазова'                                                   , 2})
    aadd(arr, {' 3 НМИЦ сердечно-сосудистой хирургии им.А.Н.Бакулева'                      , 3})
    aadd(arr, {' 4 НМИЦ здоровья детей'                                                    , 4})
    aadd(arr, {' 5 НМИЦ акушерства, гинекологии и перинатологии им.академика В.И.Кулакова' , 5})
    aadd(arr, {' 6 НМИЦ радиологии'                                                        , 6})
    aadd(arr, {' 7 НМИЦ детской гематологии, онкологии и иммунологии им.Дмитрия Рогачева'  , 7})
    aadd(arr, {' 8 НМИЦ психиатрии и наркологии им.В.П.Сербского'                          , 8})
    aadd(arr, {' 9 НМИЦ кардиологии'                                                       , 9})
    aadd(arr, {'10 НМИЦ им.академика Е.Н.Мешалкина'                                        ,10})
    aadd(arr, {'11 НМИЦ эпидемиологии и микробиологии им.почетного академика Н.Ф.Гамалеи'  ,11})
    aadd(arr, {'12 НМИЦ профилактической медицины'                                         ,12})
    aadd(arr, {'13 НМИЦ эндокринологии'                                                    ,13})
    aadd(arr, {'14 НМИЦ онкологии им.Н.Н.Петрова'                                          ,14})
    aadd(arr, {'15 НМИЦ реабилитации и курортологии'                                       ,15})
    aadd(arr, {'16 НМИЦ гематологии'                                                       ,16})
    aadd(arr, {'17 НМИЦ психиатрии и неврологии им.В.М.Бехтерева'                          ,17})
    aadd(arr, {'18 НМИЦ нейрохирургии им.академика Н.Н.Бурденко'                           ,18})
    aadd(arr, {'19 НМИЦ травматологии и ортопедии им.Н.Н.Приорова'                         ,19})
    aadd(arr, {'20 НМИЦ трансплантологии и искусственных органов им.академика В.И.Шумакова',20})
    aadd(arr, {'21 НМИЦ хирургии им.А.В.Вишневского'                                       ,21})
    aadd(arr, {'22 НМИЦ МНТК "Микрохирургия глаза" им.академика С.Н.Федорова'              ,22})
    aadd(arr, {'23 НМИЦ фтизиопульмонологии и инфекционных заболеваний'                    ,23})
    aadd(arr, {'24 НМИЦ глазных болезней имени Гельмгольца'                                ,24})
    aadd(arr, {'25 ФГАОУ ВО "Сеченовский Университет"'                                     ,25})
    aadd(arr, {'26 НМИЦ им Н.И. Пирогова'                                                  ,26})
    aadd(arr, {'27 ФГБОУ Московский гос.медико-стоамтологический ун-т им.А.И.Евдокимова'   ,27})
    aadd(arr, {'28 ФГБОУ Санкт-Петербургский гос.педиатрический медицинский университет'   ,28})
    aadd(arr, {'29 НМИЦ травматологии и ортопедии имени Р.Р. Вредена'                      ,29})
    aadd(arr, {'30 НМИЦ травматологии и ортопедии имени академика Г.А. Илизарова'          ,30})
    aadd(arr, {'31 НМИЦ детской травматологии и ортопедии имени Г.И. Турнера'              ,31})
    aadd(arr, {'32 НМИЦ онкологии'                                                         ,32})
    aadd(arr, {'33 НМИЦ стоматологии и челюстно-лицевой хирургии'                          ,33})
    aadd(arr, {'34 НМИЦ Лечебно-реабилитационный центр'                                    ,34})
    aadd(arr, {'35 НМИЦ колопроктологии им. А.Н. Рыжих'                                    ,35})
    aadd(arr, {'36 НМИЦ оториноларингологии ФМБА'                                          ,36})
  endif
  
  return arr

// 30.03.23
function getParOrgan()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'1 Правая нижняя конечность', 1})
    aadd(arr, {'2 Левая нижняя конечность', 2})
    aadd(arr, {'3 Правая верхняя конечность', 3})
    aadd(arr, {'4 Левая верхняя конечности', 4})
    aadd(arr, {'5 Правая молочная железа', 5})
    aadd(arr, {'6 Левая молочная железа', 6})
    aadd(arr, {'7 Правый глаз, придатки глаза', 7})
    aadd(arr, {'8 Левый глаз, придатки глаза', 8})
    aadd(arr, {'9 Правая сторона', 9})
    aadd(arr, {'10 Левая сторона', 10})
    aadd(arr, {'11 Таз (правая сторона)', 11})
    aadd(arr, {'12 Таз (левая сторона)', 12})
    aadd(arr, {'13 Грудная клетка (правая сторона)', 13})
    aadd(arr, {'14 Грудная клетка (левая сторона)', 14})
    aadd(arr, {'15 Верхняя челюсть', 15})
    aadd(arr, {'16 Нижняя челюсть', 16})
    aadd(arr, {'17 Позвоночник', 17})
    aadd(arr, {'18 Грудина', 18})
  endif

  return arr

// 30.03.23
function getPrichInv()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'общее заболевание', 1})
    aadd(arr, {'трудовое увечье', 2})
    aadd(arr, {'профессиональное заболевание', 3})
    aadd(arr, {'инвалидность с детства', 4})
    aadd(arr, {'инвалидность с детства вследствие ранения (боевые действия в период ВОВ)', 5})
    aadd(arr, {'военная травма', 6})
    aadd(arr, {'заболевание получено в период военной службы', 7})
    aadd(arr, {'заболевание радиационное (при исполнении военной службы) на Чернобыльской АЭС', 8})
    aadd(arr, {'заболевание связано с катастрофой на Чернобыльской АЭС', 9})
    aadd(arr, {'заболевание (иные обязанности исполнения военной службы) на Чернобыльской АЭС', 10})
    aadd(arr, {'заболевание связано с аварией на ПО "Маяк"', 11})
    aadd(arr, {'заболевание (иные обязанности исполнения военной службы) на ПО "Маяк"', 12})
    aadd(arr, {'заболевание связано с последствиями радиационных воздействий', 13})
    aadd(arr, {'заболевание радиационное (при исполнении военной службы) подразд.особого риска', 14})
    aadd(arr, {'заболевание (ранение) при обслуживавании в/ч ВС СССР и РФ, воюющих за рубежом', 15})
    aadd(arr, {'иные причины, установленные законодательством РФ', 16})
  endif

  return arr

// 29.03.23
function getVidUd()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'Паспорт гражд.СССР', 1, 1, 'ПАСПОРТ'})
    aadd(arr, {'Загранпасп.гражд.СССР', 2, 0, 'ЗГПАСПОРТ'})
    aadd(arr, {'Свид-во о рождении (РФ)', 3, 1, 'св-во о рож.РФ'})
    aadd(arr, {'Уд-ние личности офицера', 4, 0, 'УДОСТ ОФИЦЕРА'})
    aadd(arr, {'Справка об освобождении', 5, 1, 'СПРАВКА ОБ ОСВ'})
    aadd(arr, {'Паспорт Минморфлота', 6, 0, 'ПАСПОРТ МОРФЛТ'})
    aadd(arr, {'Военный билет', 7, 0, 'ВОЕННЫЙ БИЛЕТ'})
    aadd(arr, {'Дипл.паспорт гражд.РФ', 8, 0, 'ДИППАСПОРТ РФ'})
    aadd(arr, {'Иностранный паспорт', 9, 1, 'ИНОСТР ПАСПОРТ'})
    aadd(arr, {'Свидетельство...беженца', 10, 0, 'СВИД БЕЖЕНЦА'})
    aadd(arr, {'Вид на жительство', 11, 1, 'ВИД НА ЖИТЕЛЬ'})
    aadd(arr, {'Удост-ие беженца в РФ', 12, 1, 'УДОСТ БЕЖЕНЦА'})
    aadd(arr, {'Врем.уд.личн.гражд.РФ', 13, 1, 'ВРЕМ УДОСТ'})
    aadd(arr, {'Паспорт гражд.России', 14, 1, 'паспорт России'})
    aadd(arr, {'Загранпасп.гражд.РФ', 15, 1, 'ЗПАСПОРТ РФ'})
    aadd(arr, {'Паспорт моряка', 16, 0, 'ПАСПОРТ МОРЯКА'})
    aadd(arr, {'Военный билет оф.запаса', 17, 0, 'ВОЕН БИЛЕТ ОЗ'})
    aadd(arr, {'Иные документы', 18, 1, 'ПРОЧЕЕ'})
    aadd(arr, {'Док-т инос.гражданина', 21, 0, 'ИНОСТР ГРАЖДАН'})
    aadd(arr, {'Док-т лица без гражданства', 22, 0, 'ЛИЦО БЕЗ ГРАЖД'})
    aadd(arr, {'Разр-ие на врем.проживание', 23, 0, 'РАЗР НА ВР.ПР.'})
    aadd(arr, {'Свид-во о рожд.(не в РФ)', 24, 0, 'св.о рож.не РФ'})
  endif
  
  return arr

// 30.03.23
function get_Name_Vid_Ud(vid_doc, lFull, suffics)
  local ret := '', j

	HB_Default( @vid_doc, 0 ) 
	HB_Default( @lFull, .f. ) 
	HB_Default( @suffics, '' ) 

  if (j := ascan(getVidUd(), {|x| x[2] == vid_doc})) > 0
    ret := getVidUd()[j, iif(lFull, 1, 4)] + suffics
  endif

  return ret

// 30.03.23 Основания пребывания в РФ
function get_osn_preb_RF()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'ВЖ (вид на жительство)', 1})
    aadd(arr, {'РВП (разрешение на временнное пребывание)', 0})
    aadd(arr, {'Миграционная карта', 2})
    aadd(arr, {'Туристическая виза', 3})
    aadd(arr, {'Медицинская виза', 4})
    aadd(arr, {'Гостевая виза', 5})
    aadd(arr, {'Деловая виза', 6})
    aadd(arr, {'Транзитная виза', 7})
    aadd(arr, {'Студенческая виза', 8})
    aadd(arr, {'Рабочая виза', 9})
    aadd(arr, {'Другая виза', 10})
  endif
  return arr

// 11.07.24
function get_bukva()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'A-амбулаторно-поликлиническая помощь (A)'    , 'A'})
    aadd(arr, {'B-СМП с тромболитической терапией'           , 'B'})
    aadd(arr, {'D-диспансеризация детей-сирот (стационарных)', 'D'})
    aadd(arr, {'E-скорая медицинская помощь'                 , 'E'})
    aadd(arr, {'F-профилактический осмотр несовершеннолетних', 'F'})
    aadd(arr, {'G-дерматовенерологическая помощь'            , 'G'})
    aadd(arr, {'H-высокотехнологичная медицинская помощь'    , 'H'})
    aadd(arr, {'I-дисп. репродуктивного здоровья первый этап', 'I'})
    aadd(arr, {'J-амбулаторно-поликлиническая помощь'        , 'J'})
    aadd(arr, {'K-отдельные медицинские услуги'              , 'K'})
    aadd(arr, {'M-законченный случай в стационаре (1.7.*)'   , 'M'})
    aadd(arr, {'N-стационарная помощь/дополнительные объёмы' , 'N'})
    aadd(arr, {'O-диспансеризация взрослого населения'       , 'O'})
    aadd(arr, {'R-профилактика взрослого населения'          , 'R'})
    aadd(arr, {'S-стационарная помощь'                       , 'S'})
    aadd(arr, {'T-стоматологическая помощь'                  , 'T'})
    aadd(arr, {'U-диспансеризация детей-сирот (под опекой)'  , 'U'})
    aadd(arr, {'V-дисп. репродуктивного здоровья второй этап', 'V'})
    aadd(arr, {'W-углубленная диспансеризация первый этап'   , 'W'})
    aadd(arr, {'Y-углубленная диспансеризация второй этап'   , 'Y'})
    aadd(arr, {'Z-дневной стационар'                         , 'Z'})
  endif

  return arr

// 30.03.23 список причин на госпитализацию пациента
function get_reason_annul()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'1-отсутствие показаний для госпитализации',1})
    aadd(arr, {'2-непредставление необходимого пакета документов (отказ стационара)',2})
    aadd(arr, {'3-инициативный отказ от госпитализации пациентом',3})
    aadd(arr, {'4-отказ от госпитализации по эпидемиологическим показаниям', 4})
    aadd(arr, {'5-карантин в стационарном отделении', 5})
    aadd(arr, {'6-направление застрахованного лица не по профилю заболевания', 6})
    aadd(arr, {'7-неявка пациента на госпитализацию', 7})
    aadd(arr, {'8-смерть до госпитализации', 8})
    aadd(arr, {'9-прочие причины', 9})
  endif
  return arr

// 31.03.23  код категории льготы
function get_stm_kategor()
  static arr

  if arr == nil
    arr := {}
    aadd(arr, {'инвалиды войны', 1, 1})
    aadd(arr, {'участники Великой Отечественной войны', 2, 2})
    aadd(arr, {'ветераны боевых действий (закон №5-ФЗ от 12.01.95г. "О ветеранах")', 8, 3})
    aadd(arr, {'военнослужащие не из действующей армии (период 22.06.41-03.09.45)', 5, 4})
    aadd(arr, {'лица, награждённые знаком "Жителю блокадного Ленинграда"', 4, 5})
    aadd(arr, {'лица, работавшие в период ВОВ на объектах ПВО и т.п.', 14, 6})
    aadd(arr, {'члены семей погибших (умерших) инвалидов войны, УВОВ, ветеранов...', 3, 7})
    aadd(arr, {'инвалиды', 6, 8})
    aadd(arr, {'дети-инвалиды', 7, 9})
    aadd(arr, {'Подв.рад.облуч.', 9, 0})
    aadd(arr, {'Подв.рад.облуч.(ЧАЭС)', 91, 0})
    aadd(arr, {'Подв.рад.обл.(Сем.п.)', 92, 0})
    aadd(arr, {'Подв.рад.облуч.(др.)', 93, 0})
    aadd(arr, {'Реабилитированный', 10, 0})
    aadd(arr, {'Подросток', 11, 0})
    aadd(arr, {'Ребенок до года', 12, 0})
    aadd(arr, {'прочие', 13, 13})
  endif
  return arr